// counterSlice.js
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  value: 0,
};

const counterSlice = createSlice({
  name: "counter",
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
  },
});

export const { increment, decrement } = counterSlice.actions;
export default counterSlice.reducer;





// store.js
import { configureStore } from "@reduxjs/toolkit";
import counterReducer from "./counterSlice";

const store = configureStore({
  reducer: {
    counter: counterReducer,
  },
});

export default store;




// Counter.jsx
import React from "react";
import { useSelector, useDispatch } from "react-redux";
import { increment, decrement } from "./redux/counterSlice";

const Counter = () => {
  const count = useSelector((state) => state.counter.value);
  const dispatch = useDispatch();

  return (
    <div>
      <h1 data-testid="counter-value">Counter: {count}</h1>
      <button data-testid="increment-button" onClick={() => dispatch(increment())}>
        Increment
      </button>
      <button data-testid="decrement-button" onClick={() => dispatch(decrement())}>
        Decrement
      </button>
    </div>
  );
};

export default Counter;





// counterSlice.test.js
import counterReducer, { increment, decrement } from "./counterSlice";

test("should increment counter value", () => {
  const initialState = { value: 0 };
  const newState = counterReducer(initialState, increment());
  expect(newState.value).toBe(1);
});

test("should decrement counter value", () => {
  const initialState = { value: 5 };
  const newState = counterReducer(initialState, decrement());
  expect(newState.value).toBe(4);
});


