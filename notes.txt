Higher Order Component (HOC)
A HOC is a function that takes a component as an argument and returns a new enhanced component.

adding extra functionality
code reuse
logic abstraction

https://example.com/products/123?sort=asc&category=electronics

https:// => protocol
example.com => domain
/products/123 => path (with path parameter)
?sort=asc&category=electronics => query parameter




Activity 2
Library Component
    nav
        link - Authors
        link - Genres

    Outlet


Compontnt - Authors

Component - Genres

Component - App
    nav
        link - library

    routes
        route - library
            route - authors
            route - genres


Class Components
---------------------------------
class component creation

props
    this.props

state
    this.state
    this.setState()


lifecycle methods
    different phases of a component

    1. mounting phase (when component gets created)
        constructor()
        componentDidMount()

    2. updating phase (when state or props gets updated)
        componentDidUpdate()

    3. unmounting phase (when component is about to destroy)
        componentWillUnmount()




useEffect
----------------
useEffect(callback, dependency array);



component re-renders when state or prop changes




useContext
----------------------
step 1 - create context file        ✅
step 2 - create a provider component  ✅
step 3 - use provider in App component ✅
step 4 - consume context in components ✅




We are building a Counter + Theme Changer App using CounterContext
1. Count: kepps track of the counter value
2. Theme: switches between light and dark
3. Both managed under one context

step 1 - create the context
step 2 - use Provider in App.jsx
step 3 - consume the Context in CounterDashboard.jsx