Higher Order Component (HOC)
A HOC is a function that takes a component as an argument and returns a new enhanced component.

adding extra functionality
code reuse
logic abstraction

https://example.com/products/123?sort=asc&category=electronics

https:// => protocol
example.com => domain
/products/123 => path (with path parameter)
?sort=asc&category=electronics => query parameter




Activity 2
Library Component
    nav
        link - Authors
        link - Genres

    Outlet


Compontnt - Authors

Component - Genres

Component - App
    nav
        link - library

    routes
        route - library
            route - authors
            route - genres


Class Components
---------------------------------
class component creation

props
    this.props

state
    this.state
    this.setState()


lifecycle methods
    different phases of a component

    1. mounting phase (when component gets created)
        constructor()
        componentDidMount()

    2. updating phase (when state or props gets updated)
        componentDidUpdate()

    3. unmounting phase (when component is about to destroy)
        componentWillUnmount()




useEffect
----------------
useEffect(callback, dependency array);



component re-renders when state or prop changes




useContext
----------------------
step 1 - create context file        ✅
step 2 - create a provider component  ✅
step 3 - use provider in App component ✅
step 4 - consume context in components ✅




We are building a Counter + Theme Changer App using CounterContext
1. Count: kepps track of the counter value
2. Theme: switches between light and dark
3. Both managed under one context

step 1 - create the context
step 2 - use Provider in App.jsx
step 3 - consume the Context in CounterDashboard.jsx




state management
--------------------------
useState()
props drilling
useContext()


small => props drilling
small to medium => context api
medium to large => redux


benifits of redux
--------------
state centralized
better debugging
predictable state
all components can be accessed from a single place, not matter how nested they are
no problem with a component using state from multiple contexts (in case of context api)



terminologies
--------------------------
1. store - centralized state container
2. action - event that describes what you want to do
3. reducer - function that updates state based on action
4. dispatch - way to send action to reducer
5. state - data that we keep in store




architecture
---------------
component   -->     action 
                       | dispatch
                       | 
                    reducer
                       |
                       |
                    store
                       |
                       |
                 <--- state



example 1 (redux)
-------------------------
1. create react app and install redux + react-redux  ✅
2. create actions   ✅
3. create reducer   ✅
4. create store     ✅
5. connect store to react   ✅
6. create Counter component ✅
7. use Counter component in App ✅




redux
-----
- more boilerplate code
- manually create reducers and actions
- can't directly mutate the state




redux toolkit
-------------
- less boilerplate code
- slice (reducers + actions)
- you can mutate the state directly



thunk
----------




optimization
----------------
prop drilling vs context api
useMemo
useCallback
debouncing and throttling
lazy loading





error handling
--------------
error boundary

try catch

async function fetchdata() {
    try {
        // data fetching code
    } catch(error) {
        // handle error
    }
}

function handleClick() {
    try {
        throw new Error("button click error!");
    } catch(error) {
        setMessage("something went wrong");
    }
}

then and catch


debugging
---------
console.log()

debugger

react developer tools





common errors
------------------------
1. syntax error
const sum = (a, b => {
    // ...
}

2. reference error
cl(userName);

3. type error
const num = 52;
num()


common error scenarios in react
-------------------------------
1. cannot read property 'X' of undefined
const user = null
cl(user.name);

2. each child in a list should have a unique key props

3. using useState
using hook outside component


function one() {
    useState()  // ❌
    return a + b;
}






netlify
---------------------------
web hosting & deployment -- fast & free!
continuous deployment
automatic site build
CDN
no backend handling
custom domain
A/B testing 
authentication & user management